#======================================================================================================================
#Server Configuration
#======================================================================================================================
server:
  port: 50101

spring:
  main:
    log-startup-info: false

  application:
    name: backend-api

  output:
    ansi:
      enabled: always

#======================================================================================================================
#Database Configuration
#======================================================================================================================
  datasource:
    ## 로컬 서버
    url: ENC(PLxbrWuEMv706G+WjWWEoPoxQX13l2zwImFlvLVnCeYwC7su/Rj6htL0LhsibNu/VNu04JRgY1uhTshzQexkiCKTvLRbmNXg2LuQY3BIV16l/py0+ifX8SSRkAxE8TQdLt38tTEqpuOWMs7eoyIpxcDz0U7gn4PG)
    username: ENC(a/HoMq4ec+jCmCGzE78Q+Q==)
    password: ENC(FF4n5XjBfGX+F0aPmm1uVsUqF6AdCSv3)
    driver: com.mysql.cj.jdbc.Driver

    hikari:
      maximum-pool-size: 20 # 커넥션 풀의 최대 크기 설정
      minimum-idle: 5 # 유휴 커넥션을 유지할 최소한의 커넥션 수 설정
#      idle-timeout: 30000 # 유휴 컨넥션의 최대 유지 시간 설정 (30초)
#      max-lifetime: 60000 # 커넥션의 최대 생명 주기 설정 (60초)
      connection-timeout: 2000 # 커넥션 타임아웃 설정 (2초)
      pool-name: HikariCP
#      validation-timeout: 5000 # 커넥션 유효성 검사 타임아웃 설정 (5초)
#      leak-detection-threshold: 10000 # 커넥션 누수 감지 타임아웃 설정 (10초)
      auto-commit: true

      # 로그 관련 설정
      data-source-properties:
        dataSource.logWriter: # 로그 작성 구현체 지정
        dataSource.logUnclosedConnections: true  # 사용하지 않은 커넥션의 로깅 여부 지정

  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 20MB

  mvc:
    pathmatch:
      matching-strategy: ant-path-matcher

  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update # update / create-drop / create / validate / none
    #      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
#    defer-datasource-initialization: true
    properties:
      hibernate:
        format_sql: true
        show-sql: true
        highlight_sql: true # ANSI 코드에 색을 나타낸다
        use_sql_comments: true
        dialect_storage_engine: InnoDB
        order_inserts: true
        order_updates: true
        jdbc:
          batch_size: 100

  data:
    redis:
      sentinel:
        master: mymaster
        nodes:
          - localhost:26379
          - localhost:26380
          - localhost:26381
      timeout: 1000 # milliseconds (Redis 연결 타임아웃)
      lettuce:
        pool:
          max-active: 16    # 최대 커넥션 개수
          max-idle: 8       # 최대 idle 커넥션 수
          min-idle: 2       # 최소 idle 커넥션 수
          max-wait: 5000    # 커넥션 부족 시 최대 대기 시간 (ms)
        shutdown-timeout: 100 # Lettuce 클라이언트 종료시 최대 대기 시간 (ms)
        cluster:
          refresh:
            adaptive: true  # 동적으로 클러스터 상태 감지 (Sentinel에서도 사용 가능)
            period: 30000   # 정기적으로 클러스터 토폴로지 리프레시 주기 (ms)
    cache:
      type: redis

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: INFO
    com.backend.api: DEBUG
    com.zaxxer.hikari: DEBUG
    io.lettuce.core: INFO
    org.springframework.data.redis: DEBUG
    com.backend.api.listener.KeyExpirationListener: DEBUG

  slack:
#    webhook-redis: ENC(PLxbrWuEMv706G+WjWWEoPoxQX13l2zwImFlvLVnCeYwC7su/Rj6htL0LhsibNu/VNu04JRgY1uhTshzQexkiCKTvLRbmNXg2LuQY3BIV16l/py0+ifX8SSRkAxE8TQdLt38tTEqpuOWMs7eoyIpxcDz0U7gn4PG)
    webhook:
  config: classpath:logback-spring.xml

#======================================================================================================================
# JWT Token config
#======================================================================================================================
token:
  access_expiration_time: 180000000 # (1000 * 60 * 1000) * 3 = 300분
  refresh_expiration_time: 86400000 # (1000 * 60) * 60 * 24 = 1일
  secret: myJwtSecretKey

authorization:
  token:
    header:
      access-name: AccessToken
      refresh-name: RefreshToken
      prefix: Bearer

jasypt:
  encryptor:
    password: ${JASYPT_ENCRYPTOR_PASSWORD}
    algorithm: PBEWithMD5AndDES
    pool-size: 1
    string-output-type: base64
    iv-generator-classname: org.jasypt.iv.NoIvGenerator

aws:
  region:
    static: ap-northeast-2
  s3:
    bucket: test-s3

# Actuator
management:
  info:
    java:
      enabled: true
    os:
      enabled: true
    env:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "health,info,metrics,prometheus"
      base-path: /monitor
    jmx:
      exposure:
        exclude: "*"
        include: info, health
  metrics:
    enable:
      all: true
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      show-components: always
  #      show-details: always
  server:
    port: 9090

info:
  app:
    name: hello-actuator

springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    display-request-duration: true