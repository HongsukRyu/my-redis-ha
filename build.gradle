buildscript {
	ext {
		querydslVersion = '5.0.0'
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

test {
	useJUnitPlatform()
	maxParallelForks = 1 // 동시에 실행할 worker 수 제한
}

jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport {
	dependsOn test // 테스트 후 실행
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	// 커버리지를 측정할 클래스 범위 설정
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: [
							'**/config/**',
							'**/dto/**',
							'**/entity/**',
							'**/exception/**'
					])
				})
		)
	}
}

tasks.withType(Test).configureEach {
	jacoco.includeNoLocationClasses = true
	jacoco.excludes = ['jdk.internal.*']
}

group = 'backend-api'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.glassfish.jersey.core'
		exclude group: 'org.glassfish.jersey.inject'
		exclude group: 'org.glassfish.jersey.containers'
		exclude group: 'javax.ws.rs', module: 'javax.ws.rs-api'
	}
}

configurations.configureEach {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.springframework.security') {
			details.useVersion '6.2.2'
		}
	}
}

repositories {
	mavenCentral()
	// maven { url "https://repo1.maven.org/maven2/" } // 거의 동일
}

dependencies {

	// Spring boot web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-config'

	// JASYPT(Java Simplified Encryption)
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
	implementation 'org.apache.pulsar:pulsar-client:2.11.0'

	// HikariCP
	implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.1.0'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	compileOnly 'org.projectlombok:lombok'

	//QueryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
	annotationProcessor 'org.projectlombok:lombok'

	// Mybatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

	// Model Mapper
	implementation 'org.modelmapper:modelmapper:3.2.0'

	//jakarta.inject
	implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'

	// SQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	// jsonwebtoken - release on 2022.04.28
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Spring Boot Configuration Processor
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// Java SSH 라이브러리 - jsch
	implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'

	// 테스트를 위한 H2 데이터베이스 의존성 추가
	testRuntimeOnly 'com.h2database:h2'

	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// Actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.0'

	implementation 'commons-fileupload:commons-fileupload:1.5' // 1.4 -> 1.5

	implementation 'org.apache.httpcomponents:httpclient:4.5.14'
	implementation 'commons-io:commons-io:2.15.1' // 최신 버전 확인 권장
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'
	implementation 'org.json:json:20231013'
	implementation 'org.apache.tika:tika-core:2.9.2'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	// http://localhost:50101/swagger-ui/index.html

	implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'


	implementation 'org.bouncycastle:bcprov-jdk15on:1.70' // 1.69 -> 1.70
	implementation 'org.jsoup:jsoup:1.17.2' // 1.15.3 -> 1.17.2

	// BigExcel
	implementation 'org.apache.poi:poi:5.2.5'
	implementation 'org.apache.poi:poi-ooxml:5.2.5'

	// prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// Slack
	implementation 'com.github.maricn:logback-slack-appender:1.6.1' // 1.4.0 -> 1.6.1

	// Selenium
	testImplementation 'org.seleniumhq.selenium:selenium-java:4.19.1'

	// docker-java
	implementation("com.github.docker-java:docker-java:3.3.6")
	implementation("com.github.docker-java:docker-java-transport-httpclient5:3.3.6")
	implementation("com.github.docker-java:docker-java-core:3.3.6")

	implementation 'javax.ws.rs:javax.ws.rs-api:2.1'

//	configurations.all {
//		exclude group: 'javax.ws.rs', module: 'javax.ws.rs-api'
//	}

	// Google OAuth
	implementation group: 'com.google.api-client', name: 'google-api-client', version: '2.6.0'

	implementation group: 'com.google.http-client', name: 'google-http-client-jackson', version: '1.29.2'

//	compileOnly group: 'javax', name: 'javaee-web-api', version: '8.0.1'

	implementation group: 'com.google.apis', name: 'google-api-services-oauth2', version: 'v2-rev157-1.25.0'

	compileOnly("jakarta.servlet:jakarta.servlet-api:6.1.0")

	// Cache
	implementation 'net.sf.ehcache:ehcache:2.10.9.2'
	implementation 'org.ehcache:ehcache:3.10.8'
	implementation 'javax.cache:cache-api:1.1.1' // JSR-107 표준 API -- jakarta 대신 사용

	// S3
	implementation(platform("software.amazon.awssdk:bom:2.25.0")) // 최신 BOM
	implementation("software.amazon.awssdk:s3")
	implementation("software.amazon.awssdk:auth")
	implementation("software.amazon.awssdk:s3-transfer-manager:2.25.0")

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

}

tasks.register("startRedisIfNotRunning") {
	def composeFile = "${projectDir}/redis-compose.yml"

	doFirst {
		println "Checking if Redis container is running..."
		def result = "docker ps --filter name=redis-local --format '{{.Names}}'".execute().text.trim()
		if (result != "redis-local") {
			println "Starting Redis container..."
			exec {
				commandLine "docker", "compose", "-f", composeFile, "up", "-d", "redis"
			}
		} else {
			println "Redis container already running."
		}
	}
}

tasks.named("bootRun") {
	dependsOn("startRedisIfNotRunning")
}